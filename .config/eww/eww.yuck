;; -*- lisp -*-
;; Variables
;; (defpoll upHour     :interval "5s" `uptime | awk -F'( |,|:)+' '{print $6,"hours"}'`)
;; (defpoll upMin      :interval "5s" `uptime | awk -F'( |,|:)+' '{print $6,"minutes"}'`)
;; (defpoll upMin              :interval "5s" `uptime -p | awk '{print $2, "minutes"}'`)
;; (defpoll upHour             :interval "5s" `uptime -p | awk '{print $2}'`)
;; (defpoll upMin              :interval "5s" `uptime -p | awk '{print $2, "minutes"}'`)
(defpoll upMin :interval "5s" `awk '{print int((($1%3600)/60)) == 1 ? "1 minute" : int((($1%3600)/60)) " minutes"}' /proc/uptime`)
(defpoll upHour :interval "5s" `awk '{print int($1/3600) == 1 ? "1 hour" : int($1/3600) " hours"}' /proc/uptime`)

;; (defpoll upHour             :interval "5s" `awk '{print int($1/3600), "hours"}' /proc/uptime`)
;; (defpoll upMin              :interval "5s" `awk '{print int(($1%3600)/60), "minutes"}' /proc/uptime`)
(defpoll calendarDay        :interval "2h" "date \"+%d\"")
(defpoll calendarMonth      :interval "2h" "date \"+%m\"")
(defpoll calendarYear       :interval "2h" "date \"+%Y\"")
(defpoll music      :interval "2s" "playerctl metadata --format '{{ artist }} - {{ title }}'")
(defpoll music2     :interval "10h" "~/.config/eww/scripts/getArtist")
(defpoll music3     :interval "10h" "~/.config/eww/scripts/getTitle")
(defpoll musicArt   :interval "3s" "~/.config/eww/scripts/getArt")
(defpoll musicCover :interval "3s" "~/.config/eww/scripts/echoArt")
(defpoll musicTitle :interval "3s" "~/.config/eww/scripts/echoTitle")
(defpoll musicStat  :interval "3s" "~/.config/eww/scripts/musicStat")
;; (defpoll musicPos   :interval "16ms" "~/.config/eww/scripts/getMusicPosition")
(defpoll musicArtist :interval "1s" "cat /tmp/eww-music/spotify/artist")
(defpoll currentBrightness :interval "100ms" "brightnessctl -m | awk -F , '{print $4}' | tr -d '%'")
;; (defpoll currentVolume :interval "500ms" "pactl get-sink-volume 0 | grep '[0-9][0-9]%' | awk '{print $5}' | tr -d '%'")
(defpoll currentVolume :interval "100ms" "wpctl get-volume @DEFAULT_SINK@ | awk '{print ($2*100)%100}'")
(defpoll currentBattery :interval "1s" "cat /sys/class/power_supply/BAT0/capacity")
(defpoll currentCPU :interval "1s" "$HOME/.config/eww/scripts/cpuInfo")
(defpoll currentNetwork :interval "2s" "$HOME/.config/eww/scripts/getNetwork")
(defpoll currentBluetooth :interval "2s" "$HOME/.config/eww/scripts/getBluetooth")
(defpoll currentMic :interval "2s" "$HOME/.config/eww/scripts/getMic")

(defvar monitorColors `["ws-red", "ws-yellow", "ws-green", "ws-blue"]`)
(deflisten hyprland "gross hyprland")

;; Widgets
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 80 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text upHour)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text upMin)))))


(defwidget powermenu []
  (box :class "genwin" :vexpand "false" :hexpand "true"
	   (button :class "logoutBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --logout &" "󰗽")
	   (button :class "shutdownBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --shutdown &" "󰐥")
	   (button :class "restartBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --reboot &" "󰜉")
	   (button :class "lockBtn" :onclick "$(hyprlock)" "󰌾")))

(defwidget quicksettings []
  (box :orientation "v" :class "genwin" :vexpand "false" :hexpand "false"
	   (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "h"
			(button :class "qlogoutBtn" :onclick "~/.config/hypr/scripts/rofi-wifi &" "󰖩")
			(button :class "qshutdownBtn" :onclick "bash ~/.config/hypr/scripts/rofi-bluetooth &" "")
			(button :class "qrestartBtn" :onclick "pactl set-source-mute @DEFAULT_SOURCE@ toggle" "")
			(button :class "qsuspendBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --suspend &" "󰤄"))
			;; (image :path "/home/mgtn/.scripts/alien-avatar-onedark-bg.jpg"))
	   (box :hexpand "false" :vexpand "false" :class "nigga"
			(label :show-truncated true :text "${currentNetwork}" :class "wifiLabel")
			(label :show-truncated true :text "${currentBluetooth}" :class "wifiLabel")
			(label :show-truncated true :text "${currentMic}" :class "wifiLabel")
			(label :show-truncated true :text "" :class "wifiLabel")
			)
	   (box :class "genwin" :vexpand "false" :hexpand "false"
			(button :class "qlogoutBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --logout &" "󰗽")
			(button :class "qshutdownBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --shutdown &" "󰐥")
			(button :class "qrestartBtn" :onclick "~/.config/hypr/scripts/rofi-power-applets --reboot &" "󰜉")
			(button :class "qlockBtn" :onclick "$(hyprlock)" "󰌾"))
	   (box :class "genwin"
			(system1)
			(system2))
	   (box :class "genwin" :vexpand "false" :hexpand "false"
			(player :vexpand "false" :hexpand "false"))
 ))


(defwidget cal []
  (box :orientation "v" :halign "center" :space-evenly "false"
	   (box :class "calendarTitle" "  ${calendarDay} ${calendarMonth} ${calendarYear}")
	   (box :class "calendarWidget"
			(calendar :show-details "true"))))

(defwidget player []
  (box :space-evenly "false" :halign "right"
	   (box :orientation "v" :class "musicArt" :style "background-image: url('${musicCover}');" {musicArt})
	   (box :orientation "v" :class "musicTitle" "${music3}${musicTitle}"
			(box :orientation "v" :class "musicArtist" "${music2}${musicArtist}"))
	   ;; (box :orientation "v" :class "musicArtist" "${music2}${musicArtist}")
	   ;; (box :orientation "v" :space-evenly "false" :halign "right"
	   ;; (box :orientation "h" :halign "center" :class "musicBtn"  :space-evenly "true"
			(button :class "musicBtn" :onclick "playerctl previous" "󰙣")
			(button :class "musicBtn" :onclick "playerctl play-pause" {musicStat})
			(button :class "musicBtn" :onclick "playerctl next" "󰙡")))
			;; (box :orientation "h" :class "musicSlider" :space-evenly "false" :halign "right"
				 ;; (scale :min 0 :max 101 :value {musicPos} :active "false")))))

(defwidget volSlider [label value ?onchange ?onclick]
           (box :orientation "h"
                :class "volSlider"
                (box :class "volSliderLabel"
                     (button :onclick onclick
                             :class "volSliderIcon"
                             :halign "center"
							 :hexpand "false"
                             label
                     )
                     (scale :min 0
                            :max 101
                            :active {onchange != ""}
                            :value value
                            :onchange onchange ))))

(defwidget volumeSlider []
  (volSlider :label "󰕾"
		  :class "volSlider"
		  :value currentVolume
		  :onchange "wpctl set-volume @DEFAULT_SINK@ {}%"
		  :onclick "wpctl set-mute @DEFAULT_SINK@ toggle"))


(defwidget briSlider [label value ?onchange ?onclick]
           (box :orientation "h"
                :class "briSlider"
				:halign "center"
                (box :class "briSliderLabel"
                     (button :onclick onclick
                             :class "briSliderIcon"
                             ;; :halign "center"
							 :hexpand "false"
							 :vexpand "false"
                             label
                     )
                     (scale :min 0
                            :max 101
                            :active {onchange != ""}
                            :value value
                            :onchange onchange ))))
  
(defwidget brightSlider []
  (briSlider :label "󰃠"
		  :class "briSlider"
		  :value currentBrightness
		  :onchange "light -S {}"
		  :onclick ""))


(defwidget system1 [] 
	(box :class "genwin" :vexpand "true" :hexpand "true" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "brightnessBar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "brightnessIcon" :text "󰃠")
				(scale :min 0 :max 100 :value currentBrightness :active "false" :onchange "light -S {}%"))
			(box :class "volumeBar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "volumeIcon" :text "󰕾")
				(scale :min 0 :max 100 :active "false" :value currentVolume)))))

;; (defwidget volumeslider []
;;   (box :class "genwin" :vexpand "true" :hexpand "true" :orientation "v" :halign "center"
;; 	   (volumeSlider)
;; 	   (brightSlider)))

(defwidget system2 [] 
	(box :class "genwin" :vexpand "true" :hexpand "true" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpuBar" :orientation "h" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "cpuIcon" :text "󰍛")
				(scale :min 0 :max 100 :value currentCPU :active "false"))
			(box :class "batteryBar" :orientation "h" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "true" 
				(label :class "batteryIcon" :text "")
				(scale :min 0 :max 100 :active "false" :value currentBattery)))))

(defwidget workspaces []
  (eventbox
   :onscroll "echo {} | sed -e \"s/up/-1/g\" -e \"s/down/+1/g\" | xargs hyprctl dispatch workspace"
   (box
	:class "workspaces"
	(for ws in {hyprland.workspaces}
		 (button
		  :onclick "hyprctl dispatch workspace ${ws.name}"
		  :class `ws icon ${ws.state == "Active" ? monitorColors[ws.monitor] : ""}`
		  (box
		   :class `${ws.name == hyprland.focused ? "focused" : ""}`
		   :height 3))))))

(defwidget barLS []
  (box
   :space-evenly false
   :halign "start"
   (workspaces)))

(defwidget barBox []
  (barLS))


;; Windows
(defwindow powermenu
	:stacking "bg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 165
			   :y 120
			   :width 350
			   :height 155)
	(powermenu))
  
(defwindow calendar
	:stacking "bg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 165
			   :y 600
			   :width "400px"
			   :height "300px")
			   
	(cal))

(defwindow uptime
	:stacking "bg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 1415
			   :y 120
			   :width 350
			   :height 155)
	(uptime))

(defwindow player
	:stacking "fg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 310
			   :y 5
			   :width 245)
	(player))

(defwindow sys1
	:stacking "bg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 1415
			   :y 608
			   :width 350
			   :height 225)
	(system1))


(defwindow sys2
	:stacking "bg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 165
			   :y 608
			   :width 350
			   :height 225)
	(system2))

(defwindow volumeSlider
	:stacking "fg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 1000
			   :y 5 
			   :width 350
			   :height 15)
	(volumeSlider))

(defwindow brightSlider
	:stacking "fg"
	:focusable "false"
	:monitor 0
	:geometry (geometry
			   :x 900
			   :y 1
			   :width 350
			   :height 15)
	(brightSlider))

(defwindow quicksettings
	:monitor 0
	:stacking "fg"
	:geometry (geometry
			   :x "60%"
			   :y "2%"
			   :width 450
			   :height 15)
	(quicksettings))

(defwindow bar
	:monitor 0
	:geometry (geometry
			   :x "0%"
			   :y "0%"
			   :width "100%"
			   :height "20px"
			   :anchor "top center")
	:stacking "fg"
	:exclusive true
	:namespace "bar"
	(barBox))
